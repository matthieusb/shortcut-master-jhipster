// --------------------------------------------
// ENTITIES
// --------------------------------------------

/**
* Describes a pressed key
* label: the pressed key label ('Ctrl', 'Alt','e' ...)
* jsCode: the pressed key javascript code
*
* About KeyboardEvent.code, see the following link:
* https://developer.mozilla.org/fr/docs/Web/API/KeyboardEvent/code 
* https://www.cambiaresearch.com/articles/15/javascript-char-codes-key-codes
* http://keycode.info/
*/
entity Keystroke(keystroke) {
	label String required
    jsCode Integer required
}

/**
* Succession of keystrokes to enter to answer a shortcut question.
* label: short explanation of what the shorcut should do
*/
entity Shortcut(shortcut) {
	label String
}

/**
* Describes a command to be reproduced by the user
* command: the command he has to type as an answer, Ex: 'pwd'
*/
entity Command(command) {
    command String required
}

/**
* Decribes a succession of pressed keys to constitute a shortcut.
* IMPORTANT : For now, a question should either a command or a shorcut.
* It should not have both
*
* label: the shortcut label, Ex: 'Rename current variable'
* description: a brief description of the action, Ex: 'Renames all variables occurences on the file'
* 
* OneToMany relationship towards Keystroke
*/
entity Question(question) {
	label String required
    description String
}

/**
* Describes a list of shortcuts or commands to exercise on. 
* Each exercise has three phases handled by the front-end: PRACTISE, FIGHT, TEST
* label: the label
* description: the description
*/
entity Exercise(exercise) {
	label String required
    description String required
    order Integer required
}

/*
* An exercise phase.
* PRACTISE: phase of training, where you answer questions with help.
* FIGHT: Fight against an opponent
* TEST: Answer questions without any help
*/
enum Exercise_Phase {
	PRACTISE, FIGHT, TEST
}

/*
* Describes the exercise pursued by an app user.
* last_phase_finished: to know where the user left off its exercise
*/
entity Exercise_Visited(exercise_visited) {
	last_phase_finished Exercise_Phase required
}


/**
* The way an opponent answers to questions.
* Wil be handled by Front-End
*/
enum Opponent_Difficulty {
	CHILDISH, EASY, NORMAL, HARD, NIGHTMARE
}

/**
* Opponent used to battle against a user.
* name: the opponent name, Ex: 'Glados', 'Wheatly'
* difficulty: the difficulty the user has to face
*/
entity Opponent(opponent) {
	name String required
    difficulty Opponent_Difficulty required
}

/**
* The operating system of the exercise.
* Used to handle MacOS specific keys
*/
enum Operating_System {
	MACOS, WINLINUX
}

/**
* Training to be chosen by a user. Has a type and consists of several exercises.
* label: training label, Ex: 'Eclipse shortcuts'
* description: more detailed explanation, Ex: 'Train on eclipse shorcuts'
* operatingSystem: the OS this training will work on (mainly for shortcuts)
* imagePath; the path of the image to characterize the training
*/
entity Training(training) {
	label String required
    description String
    operating_system Operating_System required
    imagePath String
}

/**
* Type of training, like "Programming languages, Editor shortcuts, Terminal Commands ...'
* label: label of the type
* description: description of the type
*/
entity Training_Type(training_type) {
	label String required
    description String required
}

/**
* Describes the trainings visited by a user.
* last_visit_date: the last time the user visited and did actions on a training.
*/
entity Training_Visited(training_visited) {
	last_visit_date ZonedDateTime required
}

/*
* Just an empty jhi_user to copy jhipster's own user handling.
*/
entity Jhi_user(jhi_user) {

}

// --------------------------------------------
// RELATIONSHIPS
// --------------------------------------------
relationship OneToMany {
	Shortcut{keystrokes} to Keystroke
    Exercise{questions} to Question
    Training{exercises} to Exercise
}

relationship OneToOne {
	Question{commandQuestion} to Command
    Question{shorcutQuestion} to Shortcut
	Exercise{fighter} to Opponent
}

relationship ManyToOne {
	Training{trainingType} to Training_Type
    Exercise_Visited{has_done_exercise} to Exercise
    Training_Visited{has_trained_on} to Training
}


relationship ManyToMany {
	Jhi_user{trains} to Training_Visited{training_visits},
    Jhi_user{exercises} to Exercise_Visited{exercise_visits}
}

service all with serviceImpl
